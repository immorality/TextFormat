//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp1.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IUpperService")]
    public interface IUpperService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/Upper", ReplyAction="http://tempuri.org/IUpperService/UpperResponse")]
        string Upper(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/Upper", ReplyAction="http://tempuri.org/IUpperService/UpperResponse")]
        System.Threading.Tasks.Task<string> UpperAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/Lower", ReplyAction="http://tempuri.org/IUpperService/LowerResponse")]
        string Lower(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/Lower", ReplyAction="http://tempuri.org/IUpperService/LowerResponse")]
        System.Threading.Tasks.Task<string> LowerAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/FirstLetterOfSentenceToUpper", ReplyAction="http://tempuri.org/IUpperService/FirstLetterOfSentenceToUpperResponse")]
        string FirstLetterOfSentenceToUpper(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/FirstLetterOfSentenceToUpper", ReplyAction="http://tempuri.org/IUpperService/FirstLetterOfSentenceToUpperResponse")]
        System.Threading.Tasks.Task<string> FirstLetterOfSentenceToUpperAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/Refactor", ReplyAction="http://tempuri.org/IUpperService/RefactorResponse")]
        string Refactor(string str, string before, string after);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/Refactor", ReplyAction="http://tempuri.org/IUpperService/RefactorResponse")]
        System.Threading.Tasks.Task<string> RefactorAsync(string str, string before, string after);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/SpaceAfterPunctuationMark", ReplyAction="http://tempuri.org/IUpperService/SpaceAfterPunctuationMarkResponse")]
        string SpaceAfterPunctuationMark(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/SpaceAfterPunctuationMark", ReplyAction="http://tempuri.org/IUpperService/SpaceAfterPunctuationMarkResponse")]
        System.Threading.Tasks.Task<string> SpaceAfterPunctuationMarkAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/CountOfSymbols", ReplyAction="http://tempuri.org/IUpperService/CountOfSymbolsResponse")]
        string CountOfSymbols(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/CountOfSymbols", ReplyAction="http://tempuri.org/IUpperService/CountOfSymbolsResponse")]
        System.Threading.Tasks.Task<string> CountOfSymbolsAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/Remove", ReplyAction="http://tempuri.org/IUpperService/RemoveResponse")]
        string Remove(string str, string word);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/Remove", ReplyAction="http://tempuri.org/IUpperService/RemoveResponse")]
        System.Threading.Tasks.Task<string> RemoveAsync(string str, string word);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/Capitalize", ReplyAction="http://tempuri.org/IUpperService/CapitalizeResponse")]
        string Capitalize(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpperService/Capitalize", ReplyAction="http://tempuri.org/IUpperService/CapitalizeResponse")]
        System.Threading.Tasks.Task<string> CapitalizeAsync(string str);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUpperServiceChannel : WindowsFormsApp1.ServiceReference1.IUpperService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpperServiceClient : System.ServiceModel.ClientBase<WindowsFormsApp1.ServiceReference1.IUpperService>, WindowsFormsApp1.ServiceReference1.IUpperService {
        
        public UpperServiceClient() {
        }
        
        public UpperServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UpperServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpperServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpperServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Upper(string str) {
            return base.Channel.Upper(str);
        }
        
        public System.Threading.Tasks.Task<string> UpperAsync(string str) {
            return base.Channel.UpperAsync(str);
        }
        
        public string Lower(string str) {
            return base.Channel.Lower(str);
        }
        
        public System.Threading.Tasks.Task<string> LowerAsync(string str) {
            return base.Channel.LowerAsync(str);
        }
        
        public string FirstLetterOfSentenceToUpper(string str) {
            return base.Channel.FirstLetterOfSentenceToUpper(str);
        }
        
        public System.Threading.Tasks.Task<string> FirstLetterOfSentenceToUpperAsync(string str) {
            return base.Channel.FirstLetterOfSentenceToUpperAsync(str);
        }
        
        public string Refactor(string str, string before, string after) {
            return base.Channel.Refactor(str, before, after);
        }
        
        public System.Threading.Tasks.Task<string> RefactorAsync(string str, string before, string after) {
            return base.Channel.RefactorAsync(str, before, after);
        }
        
        public string SpaceAfterPunctuationMark(string str) {
            return base.Channel.SpaceAfterPunctuationMark(str);
        }
        
        public System.Threading.Tasks.Task<string> SpaceAfterPunctuationMarkAsync(string str) {
            return base.Channel.SpaceAfterPunctuationMarkAsync(str);
        }
        
        public string CountOfSymbols(string str) {
            return base.Channel.CountOfSymbols(str);
        }
        
        public System.Threading.Tasks.Task<string> CountOfSymbolsAsync(string str) {
            return base.Channel.CountOfSymbolsAsync(str);
        }
        
        public string Remove(string str, string word) {
            return base.Channel.Remove(str, word);
        }
        
        public System.Threading.Tasks.Task<string> RemoveAsync(string str, string word) {
            return base.Channel.RemoveAsync(str, word);
        }
        
        public string Capitalize(string str) {
            return base.Channel.Capitalize(str);
        }
        
        public System.Threading.Tasks.Task<string> CapitalizeAsync(string str) {
            return base.Channel.CapitalizeAsync(str);
        }
    }
}
